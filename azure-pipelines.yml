# Azure DevOps Pipeline for BahtsulMasail.tech
# Replaces Google Cloud Build

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/*

variables:
  # Container Registry
  containerRegistry: 'bahtsulmasailregistry.azurecr.io'
  imageRepository: 'bahtsulmasail-tech'
  
  # Build Configuration
  dockerfilePath: '$(Build.SourcesDirectory)'
  tag: '$(Build.BuildId)'
  
  # Azure Resource Configuration
  azureSubscription: 'BahtsulMasail-ServiceConnection'
  resourceGroup: 'bahtsulmasail-rg'
  aksCluster: 'bahtsulmasail-aks'

stages:
- stage: Build
  displayName: 'Build and Push Container Images'
  jobs:
  - job: BuildFrontend
    displayName: 'Build Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Build Frontend Image'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)-frontend'
        command: 'build'
        Dockerfile: 'frontend/Dockerfile'
        buildContext: 'frontend'
        tags: |
          $(tag)
          latest
    
    - task: Docker@2
      displayName: 'Push Frontend Image'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)-frontend'
        command: 'push'
        tags: |
          $(tag)
          latest

  - job: BuildBackend
    displayName: 'Build Backend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Build Backend Image'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)-backend'
        command: 'build'
        Dockerfile: 'backend/Dockerfile'
        buildContext: 'backend'
        tags: |
          $(tag)
          latest
    
    - task: Docker@2
      displayName: 'Push Backend Image'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)-backend'
        command: 'push'
        tags: |
          $(tag)
          latest

  - job: BuildCelery
    displayName: 'Build Celery Worker'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Build Celery Image'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)-celery'
        command: 'build'
        Dockerfile: 'backend/Dockerfile.celery'
        buildContext: 'backend'
        tags: |
          $(tag)
          latest
    
    - task: Docker@2
      displayName: 'Push Celery Image'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)-celery'
        command: 'push'
        tags: |
          $(tag)
          latest

- stage: DeployDev
  displayName: 'Deploy to Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployToDev
    displayName: 'Deploy to Development Environment'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Deploy to AKS Development'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Set AKS context
                az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster)-dev
                
                # Update image tags in deployment
                kubectl set image deployment/bahtsulmasail-frontend frontend=$(containerRegistry)/$(imageRepository)-frontend:$(tag) -n development
                kubectl set image deployment/bahtsulmasail-backend backend=$(containerRegistry)/$(imageRepository)-backend:$(tag) -n development
                kubectl set image deployment/bahtsulmasail-celery celery=$(containerRegistry)/$(imageRepository)-celery:$(tag) -n development
                
                # Wait for rollout
                kubectl rollout status deployment/bahtsulmasail-frontend -n development
                kubectl rollout status deployment/bahtsulmasail-backend -n development
                kubectl rollout status deployment/bahtsulmasail-celery -n development

- stage: DeployProd
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToProd
    displayName: 'Deploy to Production Environment'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Run Database Migrations'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Set AKS context
                az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster)
                
                # Run migrations
                kubectl run django-migrate --image=$(containerRegistry)/$(imageRepository)-backend:$(tag) \
                  --rm -i --restart=Never --env-from=configmap/bahtsulmasail-config \
                  --env DJANGO_SECRET_KEY="$(django-secret-key)" \
                  --env DB_PASSWORD="$(db-password)" \
                  --env DB_HOST="$(db-host)" \
                  --env REDIS_HOST="$(redis-host)" \
                  --env AZURE_ACCOUNT_NAME="$(azure-account-name)" \
                  --env AZURE_ACCOUNT_KEY="$(azure-account-key)" \
                  --env AZURE_CONTAINER_NAME="$(azure-container-name)" \
                  -- python manage.py migrate --noinput

          - task: AzureCLI@2
            displayName: 'Deploy to AKS Production'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Set AKS context
                az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster)
                
                # Update image tags in deployment
                kubectl set image deployment/bahtsulmasail-frontend frontend=$(containerRegistry)/$(imageRepository)-frontend:$(tag)
                kubectl set image deployment/bahtsulmasail-backend backend=$(containerRegistry)/$(imageRepository)-backend:$(tag)
                kubectl set image deployment/bahtsulmasail-celery celery=$(containerRegistry)/$(imageRepository)-celery:$(tag)
                
                # Wait for rollout
                kubectl rollout status deployment/bahtsulmasail-frontend
                kubectl rollout status deployment/bahtsulmasail-backend
                kubectl rollout status deployment/bahtsulmasail-celery

          - task: AzureCLI@2
            displayName: 'Health Check'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Get service external IP
                FRONTEND_IP=$(kubectl get service bahtsulmasail-frontend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                BACKEND_IP=$(kubectl get service bahtsulmasail-backend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                
                # Wait for services to be ready
                sleep 60
                
                # Health checks
                curl -f http://$FRONTEND_IP/ || exit 1
                curl -f http://$BACKEND_IP/api/health/ || exit 1
                
                echo "Deployment successful!"
                echo "Frontend URL: http://$FRONTEND_IP"
                echo "Backend URL: http://$BACKEND_IP" 